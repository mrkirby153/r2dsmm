datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  servers  Server[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Server {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  key       String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String?

  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activeProfile Profile?  @relation("ActiveProfile", fields: [profileId], references: [id])
  profiles      Profile[] @relation("ServerProfile")
}

enum GameMode {
  CLASSIC
  SIMULACRUM
  ECLIPSE
}

model Profile {
  id       String   @id @default(cuid())
  name     String
  serverId String
  gameMode GameMode @default(CLASSIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activeServers Server[]            @relation(name: "ActiveProfile")
  server        Server              @relation(fields: [serverId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "ServerProfile")
  mods          Mod[]
  configs       ConfigurationFile[]
}

model Mod {
  id        String  @id @default(cuid())
  profileId String
  namespace String
  name      String
  version   String
  enabled   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ConfigurationFile {
  id        String @id @default(cuid())
  file      String
  contents  String @db.Text
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
